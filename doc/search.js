window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "cloudy", "modulename": "cloudy", "kind": "module", "doc": "<h1 id=\"cloudy-a-modern-simulator-of-cloud-environments\">Cloudy: a modern simulator of cloud environments</h1>\n\n<p>Cloudy is a framework for modeling and simulating cloud computing environments and services. It enables the creation of\nvirtualized cloud computing environments, and provides a comprehensive set of features for simulating and analyzing the\nperformance of cloud infrastructures. The goal is to enable researchers and developers to evaluate the performance of\ntheir cloud-based applications and services in a realistic simulated environment. The simulator is a valuable tool for\ndevelopers, allowing them to test their applications and services in a realistic environment without the need for a\nphysical cloud environment.</p>\n\n<h2 id=\"getting-started\">Getting started</h2>\n\n<p>The simulator is designed to be easy to use and extend. To run Cloudy,</p>\n\n<ol>\n<li>Clone the project</li>\n</ol>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>$<span class=\"w\"> </span>git<span class=\"w\"> </span>clone<span class=\"w\"> </span>https://github.com/ahmad-siavashi/cloudy.git<span class=\"w\"> </span>\n</code></pre>\n</div>\n\n<ol>\n<li>Install <a href=\"https://wiki.python.org/moin/BeginnersGuide/Download\">Python 3.10</a></li>\n<li>Run the example</li>\n</ol>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>$<span class=\"w\"> </span>python3<span class=\"w\"> </span>example.py\n</code></pre>\n</div>\n\n<p>That's all. The code is minimal, self-documented and easy to read. You can quickly start coding by reading\nthe existing code and example.</p>\n\n<h2 id=\"contribution\">Contribution</h2>\n\n<p>The simulator is a work in progress. Please feel free to develop new features or make improvements. You can contact me\nthrough email at siavashi@aut.ac.ir.</p>\n"}, {"fullname": "cloudy.example", "modulename": "cloudy.example", "kind": "module", "doc": "<p>This is a simple example to demonestrate the use of the simulator. In this example, a data center with one\nphysical machine (PM) receives one request (a virtual machine) from a user. The virtual machine (VM) which contains\none application to run, arrives at time zero, i.e. the beginning of the simulation. The VM uses a\nfirst-come-first-served (FCFS) scheduling policy to execute its processes. The PM uses a space-shared policy to\nallocate resources for the virtual machine. Furthermore, the data center uses a first-fit (FF) policy to find a\nsuitable host for the request.</p>\n"}, {"fullname": "cloudy.model", "modulename": "cloudy.model", "kind": "module", "doc": "<p>The models of the simulated environment.</p>\n"}, {"fullname": "cloudy.model.App", "modulename": "cloudy.model", "qualname": "App", "kind": "class", "doc": "<p>The App class represent a single application instance in cloud.</p>\n\n<h1 id=\"attributes\">Attributes</h1>\n\n<ul>\n<li>NAME (str): name of the application</li>\n<li>LENGTH (tuple[int, ...]): length of application threads, in cycles</li>\n<li>_remained (list[int, ...], private): remained length of application threads, in cycles</li>\n</ul>\n"}, {"fullname": "cloudy.model.App.__init__", "modulename": "cloudy.model", "qualname": "App.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">NAME</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">LENGTH</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "cloudy.model.App.remained", "modulename": "cloudy.model", "qualname": "App.remained", "kind": "function", "doc": "<p>The remained function returns a tuple of the remaining number of cycles required by each thread in\nthis application to complete its execution.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong>:  Refer to the instance of the class</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A tuple of the remained cycles of application threads</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.model.App.process", "modulename": "cloudy.model", "qualname": "App.process", "kind": "function", "doc": "<p>The process function takes a tuple of integers as input, and returns a tuple of integers.\nThe input is the number of cycles available to each processor in the system. The output is\nthe remaining number of processor cycles after execution.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong>:  Refer to the current object</li>\n<li><strong>cycles: tuple[int, ...]</strong>:  Pass in the available cycles of each processor</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The remained cycles of processors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cycles</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.model.App.finished", "modulename": "cloudy.model", "qualname": "App.finished", "kind": "function", "doc": "<p>The finished function checks if the application is finished.\nIt returns True if all the threads in the application have been finished, and False otherwise.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong>:  Access the attributes of the class</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if the application is finished, and False otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.model.Vm", "modulename": "cloudy.model", "qualname": "Vm", "kind": "class", "doc": "<p>The Vm class represent a virtual machine instance in cloud.</p>\n\n<h1 id=\"attributes\">Attributes</h1>\n\n<ul>\n<li>NAME (str): name of the virtual machine</li>\n<li>CPU (int): number of cores; core speed depends on the host machine</li>\n<li>RAM (int): amount of RAM, in megabytes</li>\n<li>OS (Type[Os]): operating system which determines creation and execution of applications</li>\n</ul>\n"}, {"fullname": "cloudy.model.Vm.__init__", "modulename": "cloudy.model", "qualname": "Vm.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">NAME</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">CPU</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">RAM</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">OS</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">policy</span><span class=\"o\">.</span><span class=\"n\">Os</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "cloudy.model.Pm", "modulename": "cloudy.model", "qualname": "Pm", "kind": "class", "doc": "<p>The Pm class represent a physical machine in the data center.</p>\n\n<h1 id=\"attributes\">Attributes</h1>\n\n<ul>\n<li>NAME (str): name of the physical machine</li>\n<li>CPU (tuple[int, ...]): cycles of cores per simulation time unit</li>\n<li>RAM (int): amount of RAM in megabytes</li>\n<li>VMM (Type[Vmm]): hypervisor which determines creation and execution of virtual machines</li>\n</ul>\n"}, {"fullname": "cloudy.model.Pm.__init__", "modulename": "cloudy.model", "qualname": "Pm.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">NAME</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">CPU</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">RAM</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">VMM</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">policy</span><span class=\"o\">.</span><span class=\"n\">Vmm</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "cloudy.model.DataCenter", "modulename": "cloudy.model", "qualname": "DataCenter", "kind": "class", "doc": "<p>The DataCenter class represent a data center in cloud.</p>\n\n<h1 id=\"attributes\">Attributes</h1>\n\n<ul>\n<li>NAME (str): name of the data center</li>\n<li>SERVERS (list[Pm, ...]): physical machines of data center</li>\n<li>PLACEMENT (Type[Placement]): management utility which determines assignment of virtual machines to physical machines</li>\n</ul>\n"}, {"fullname": "cloudy.model.DataCenter.__init__", "modulename": "cloudy.model", "qualname": "DataCenter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">NAME</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">SERVERS</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cloudy</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Pm</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">PLACEMENT</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">policy</span><span class=\"o\">.</span><span class=\"n\">Placement</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "cloudy.model.Request", "modulename": "cloudy.model", "qualname": "Request", "kind": "class", "doc": "<p>The Request class represents a request that arrives at the data center.</p>\n\n<h1 id=\"attributes\">Attributes</h1>\n\n<ul>\n<li>ARRIVAL (int): arrival time of the request, in simulation time unit</li>\n<li>VM (Vm): virtual machine instance</li>\n</ul>\n"}, {"fullname": "cloudy.model.Request.__init__", "modulename": "cloudy.model", "qualname": "Request.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ARRIVAL</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">VM</span><span class=\"p\">:</span> <span class=\"n\">cloudy</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Vm</span></span>)</span>"}, {"fullname": "cloudy.model.User", "modulename": "cloudy.model", "qualname": "User", "kind": "class", "doc": "<p>The User class represents a cloud user.</p>\n\n<h1 id=\"attributes\">Attributes</h1>\n\n<ul>\n<li>NAME (str): name of the user</li>\n<li>REQUESTS (list[Request, ...]): list of user requrests (e.g., vm provisioning)</li>\n</ul>\n"}, {"fullname": "cloudy.model.User.__init__", "modulename": "cloudy.model", "qualname": "User.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">NAME</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">REQUESTS</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cloudy</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "cloudy.module", "modulename": "cloudy.module", "kind": "module", "doc": "<p>The components of the simulator.</p>\n"}, {"fullname": "cloudy.module.Clock", "modulename": "cloudy.module", "qualname": "Clock", "kind": "class", "doc": "<p>The simulator uses a clock to keep track of time. One tick equals one time unit. To make things easy, assume\none tick equals one second.</p>\n\n<h1 id=\"attributes\">Attributes</h1>\n\n<ul>\n<li>_tick (int, private): a private class variable to keep the current time</li>\n</ul>\n"}, {"fullname": "cloudy.module.Clock.reset", "modulename": "cloudy.module", "qualname": "Clock.reset", "kind": "function", "doc": "<p>The reset function resets the clock to 0.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The new current time</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.module.Clock.increment", "modulename": "cloudy.module", "qualname": "Clock.increment", "kind": "function", "doc": "<p>The increment function is used to increment the clock by a given number of ticks where each tick represents one simulation time unit.\nThe default value for ticks is 1, so if no argument is passed in, the clock will be incremented by 1 tick.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ticks: int</strong>:  Increment the clock by a certain number of ticks</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The new current time</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ticks</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.module.Clock.now", "modulename": "cloudy.module", "qualname": "Clock.now", "kind": "function", "doc": "<p>The now function returns the current time, which is stored in a private variable called _tick.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The value of the _tick attribute</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.module.Logger", "modulename": "cloudy.module", "qualname": "Logger", "kind": "class", "doc": "<p>A class that logs messages to stdout.</p>\n"}, {"fullname": "cloudy.module.Logger.__init__", "modulename": "cloudy.module", "qualname": "Logger.__init__", "kind": "function", "doc": "<p>The __init__ function initializes the class with a dictionary of column names and their widths.\nIf no arguments are passed, it defaults to the following:\n    {'Clock': 5, 'Event': 15, 'Description': 25}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "cloudy.module.Logger.begin", "modulename": "cloudy.module", "qualname": "Logger.begin", "kind": "function", "doc": "<p>The begin function prints the header for the table of events.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.module.Logger.end", "modulename": "cloudy.module", "qualname": "Logger.end", "kind": "function", "doc": "<p>The end function prints the bottom of the table of events.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.module.Logger.log", "modulename": "cloudy.module", "qualname": "Logger.log", "kind": "function", "doc": "<p>The log function is used to print out the event log.\nIt takes the values to print in a log.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>*args: Any</strong>:  Values to be logged</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.module.EventType", "modulename": "cloudy.module", "qualname": "EventType", "kind": "class", "doc": "<p>The Type class is an enum class that defines the available types af Events in the simulation.</p>\n\n<h1 id=\"attributes\">Attributes</h1>\n\n<ul>\n<li>VM_ARRIVAL (str): types of events that denote the arrival of a new IaaS request to the cloud provider</li>\n<li>DC_PROCESS (str): types of events that enforce execution of guest virtual machines in a data center</li>\n</ul>\n", "bases": "enum.Enum"}, {"fullname": "cloudy.module.EventType.VM_ARRIVAL", "modulename": "cloudy.module", "qualname": "EventType.VM_ARRIVAL", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;EventType.VM_ARRIVAL: &#x27;vm_arrival&#x27;&gt;"}, {"fullname": "cloudy.module.EventType.DC_PROCESS", "modulename": "cloudy.module", "qualname": "EventType.DC_PROCESS", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&lt;EventType.DC_PROCESS: &#x27;dc_process&#x27;&gt;"}, {"fullname": "cloudy.module.Event", "modulename": "cloudy.module", "qualname": "Event", "kind": "class", "doc": "<p>It is a class that represents an event that can occur in the simulation.</p>\n\n<h1 id=\"attributes\">Attributes</h1>\n\n<ul>\n<li>TYPE (Event.Type): the event of the event which helps in the interpretation and processing of the event</li>\n<li>DATA (object): the data that is associated with the event</li>\n</ul>\n"}, {"fullname": "cloudy.module.Event.__init__", "modulename": "cloudy.module", "qualname": "Event.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">TYPE</span><span class=\"p\">:</span> <span class=\"n\">cloudy</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">EventType</span>, </span><span class=\"param\"><span class=\"n\">DATA</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span>)</span>"}, {"fullname": "cloudy.module.EventQueue", "modulename": "cloudy.module", "qualname": "EventQueue", "kind": "class", "doc": "<p>This class represents an event queue to hold registered events during simulation</p>\n"}, {"fullname": "cloudy.module.EventQueue.put", "modulename": "cloudy.module", "qualname": "EventQueue.put", "kind": "function", "doc": "<p>The put function is used to register an event with the EventQueue class.\nThe function takes two arguments: a tick and an event. The tick argument is\nthe number of ticks that must pass before the event will be executed, and the\nevent argument will be consumed when it's time for the event to execute.\nThe register function then inserts the tuple containing these two arguments\ninto Event's list attribute at an index such that all events in this list are\nsorted by their respective ticks, with earlier events appearing first.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>tick: int</strong>:  Tell the register function when to run the event</li>\n<li><strong>event: Event</strong>:  Specify the event that is to be registered</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tick</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">cloudy</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Event</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.module.EventQueue.empty", "modulename": "cloudy.module", "qualname": "EventQueue.empty", "kind": "function", "doc": "<p>The empty function checks if the Event list is empty.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if the event list is empty, otherwise it returns false</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.module.EventQueue.get", "modulename": "cloudy.module", "qualname": "EventQueue.get", "kind": "function", "doc": "<p>The get function returns the first event in the list of events.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A single event</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">cloudy</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Event</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.module.Simulation", "modulename": "cloudy.module", "qualname": "Simulation", "kind": "class", "doc": "<p>This class represents a simulation.</p>\n"}, {"fullname": "cloudy.module.Simulation.__init__", "modulename": "cloudy.module", "qualname": "Simulation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">_user</span><span class=\"p\">:</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">User</span>,</span><span class=\"param\">\t<span class=\"n\">_datacenter</span><span class=\"p\">:</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">DataCenter</span>,</span><span class=\"param\">\t<span class=\"n\">_clock_resolution</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span>)</span>"}, {"fullname": "cloudy.module.Simulation.start", "modulename": "cloudy.module", "qualname": "Simulation.start", "kind": "function", "doc": "<p>The start function is the main function of this simulation.\nIt will run until there are no more events in the event queue.\nEach time it runs, it will get an event from the queue and call a handler for that event of event.\nThe handlers are responsible for creating new events to be added to the queue.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.policy", "modulename": "cloudy.policy", "kind": "module", "doc": "<p>The algorithms within the simulated environment.</p>\n"}, {"fullname": "cloudy.policy.Os", "modulename": "cloudy.policy", "qualname": "Os", "kind": "class", "doc": "<p></p>\n", "bases": "abc.ABC"}, {"fullname": "cloudy.policy.Os.schedule", "modulename": "cloudy.policy", "qualname": "Os.schedule", "kind": "function", "doc": "<p>The schedule function is responsible for scheduling the applications to run on the virtual machine.\nIt takes a list of App objects as input and returns a list of booleans indicating whether each app was successfully scheduled or not.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong>:  Represent the instance of a class</li>\n<li><strong>apps: list[App, ...]</strong>:  Pass in the list of apps that need to be scheduled</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of booleans</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">apps</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">App</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.policy.Os.process", "modulename": "cloudy.policy", "qualname": "Os.process", "kind": "function", "doc": "<p>The process function is the main function of the scheduler. It takes in a list of processors and an amount\nof time that they can run uninterrupted, and returns an integer representing how much time it will take to finish\nall processes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong>:  Represent the instance of the class</li>\n<li><strong>cpu: tuple[int, ...]</strong>:  Indicate the processors that are available</li>\n<li><strong>duration: int</strong>:  Determine how long the cpu can run uninterrupted</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The remaining cycles of processors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cpu</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">duration</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.policy.Os.finished", "modulename": "cloudy.policy", "qualname": "Os.finished", "kind": "function", "doc": "<p>The finished function checks to see if all of the apps in the list are finished.\nIf they are, it returns True. If not, it returns False.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong>:  Refer to the object itself</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A boolean value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.policy.Vmm", "modulename": "cloudy.policy", "qualname": "Vmm", "kind": "class", "doc": "<p>This class provides a template for implementing virtual machine managers that can allocate and deallocate VMs on a host and process.</p>\n\n<h1 id=\"attributes\">Attributes</h1>\n\n<p>_HOST(Pm, private): the physical machine on which the virtual machines managed by the Vmm instance are running\nguests (list[Vm, ...]): the list of allocated VMs</p>\n", "bases": "abc.ABC"}, {"fullname": "cloudy.policy.Vmm.allocate", "modulename": "cloudy.policy", "qualname": "Vmm.allocate", "kind": "function", "doc": "<p>The allocate function is responsible for allocating a new VM on the host.\nIt takes as input a list of VMs and returns a list of booleans, one per VM, indicating whether or not it was successfully allocated.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong>:  Represent the instance of the class</li>\n<li><strong>vms: list[Vm, ...]</strong>:  Pass in the list of vms that need to be allocated</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of boolean values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vms</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Vm</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.policy.Vmm.deallocate", "modulename": "cloudy.policy", "qualname": "Vmm.deallocate", "kind": "function", "doc": "<p>The deallocate function is used to deallocate a list of VMs from the host.\nIt returns a list of booleans, where each boolean indicates whether the VM was successfully deallocated or not.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong>:  Represent the instance of the class</li>\n<li><strong>vms: list[Vm, ...]</strong>:  Specify the vms that are to be deallocated</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of booleans</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vms</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Vm</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.policy.Vmm.process", "modulename": "cloudy.policy", "qualname": "Vmm.process", "kind": "function", "doc": "<p>The process function is the main function of the Host class. It takes a duration as an argument, and processes\nthe guest vms OS for that amount of time. Then it checks if any VMs have finished running, and returns them in a list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong>:  Represent the instance of a class</li>\n<li><strong>duration: int</strong>:  Specify the amount of time that the vms will run for</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of finished vms</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">duration</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Vm</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.policy.Vmm.idle", "modulename": "cloudy.policy", "qualname": "Vmm.idle", "kind": "function", "doc": "<p>The idle function returns True if all of the guests have no running load.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong>:  Refer to the object itself</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if all the guests have finished executing, and False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.policy.Placement", "modulename": "cloudy.policy", "qualname": "Placement", "kind": "class", "doc": "<p></p>\n", "bases": "abc.ABC"}, {"fullname": "cloudy.policy.Placement.allocate", "modulename": "cloudy.policy", "qualname": "Placement.allocate", "kind": "function", "doc": "<p>The allocate function is responsible for allocating the given VMs in the data center.\nIt should return a list of booleans, where each boolean indicates whether or not a VM was successfully allocated.\nThe order of these booleans should correspond to the order of VMs in the input list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong>:  Represent the instance of the class</li>\n<li><strong>vms: list[Vm, ...]</strong>:  Pass the list of vms to be allocated</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of booleans</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vms</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Vm</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.policy.os", "modulename": "cloudy.policy.os", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cloudy.policy.os.OsFcfs", "modulename": "cloudy.policy.os", "qualname": "OsFcfs", "kind": "class", "doc": "<p>This class is a subclass of the Os class and it implements the first-come-first-served algorithm for\napplication, i.e. process, scheduling.</p>\n", "bases": "policy.Os"}, {"fullname": "cloudy.policy.os.OsFcfs.schedule", "modulename": "cloudy.policy.os", "qualname": "OsFcfs.schedule", "kind": "function", "doc": "<p>The schedule function takes a list of apps and schedules them on the\n    scheduler. It returns a list of booleans indicating whether each app was\n    scheduled successfully or not.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong>:  Represent the instance of the class</li>\n<li><strong>apps: list[App, ...]</strong>:  Pass in a list of apps to the schedule function</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of booleans</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">apps</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">App</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.policy.os.OsFcfs.process", "modulename": "cloudy.policy.os", "qualname": "OsFcfs.process", "kind": "function", "doc": "<p>The process function takes a list of integers representing the number of\ncores available on each CPU and an integer representing the duration for which\nthe process should run. It then runs all apps in parallel, using as many cores\nas necessary to complete them within that time. If any app is not completed by\nthe end of this period, it will be left with some remaining work.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong>:  Represent the instance of the class</li>\n<li><strong>cpu: list[int, ...]</strong>:  Represent the number of cores in each cpu</li>\n<li><strong>duration: int</strong>:  Determine how long the process should run for</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The remaining cycles of processors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cpu</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">duration</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.policy.placement", "modulename": "cloudy.policy.placement", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cloudy.policy.placement.PlacementFirstFit", "modulename": "cloudy.policy.placement", "qualname": "PlacementFirstFit", "kind": "class", "doc": "<p>A class that inherits from the Placement class. It is a placement algorithm that attempts to allocate VMs to\nthe first server that has enough resources to allocate the VM.</p>\n", "bases": "policy.Placement"}, {"fullname": "cloudy.policy.placement.PlacementFirstFit.allocate", "modulename": "cloudy.policy.placement", "qualname": "PlacementFirstFit.allocate", "kind": "function", "doc": "<p>The allocate function takes a list of VMs and attempts to allocate them on the servers in the data center.\nIt returns a list of booleans, where each boolean corresponds to whether or not that VM was successfully allocated.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong>:  Refer to the object itself</li>\n<li><strong>vms: list[Vm, ...]</strong>:  Pass in the list of vms that need to be allocated</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of booleans</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vms</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Vm</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.policy.vmm", "modulename": "cloudy.policy.vmm", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cloudy.policy.vmm.VmmSpaceShared", "modulename": "cloudy.policy.vmm", "qualname": "VmmSpaceShared", "kind": "class", "doc": "<p>A space-shared VM scheduler in which each VM receives dedicated slices of resources.</p>\n", "bases": "policy.Vmm"}, {"fullname": "cloudy.policy.vmm.VmmSpaceShared.__init__", "modulename": "cloudy.policy.vmm", "qualname": "VmmSpaceShared.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_HOST</span><span class=\"p\">:</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Pm</span></span>)</span>"}, {"fullname": "cloudy.policy.vmm.VmmSpaceShared.allocate", "modulename": "cloudy.policy.vmm", "qualname": "VmmSpaceShared.allocate", "kind": "function", "doc": "<p>The allocate function takes a list of VMs and attempts to allocate them on the host.\nIt returns a list of booleans indicating whether each VM was successfully allocated or not.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong>:  Represent the instance of the class</li>\n<li><strong>vms: list[Vm, ...]</strong>:  Pass in a list of vms to the allocate function</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of booleans, where each boolean indicates whether the corresponding vm was successfully allocated</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vms</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Vm</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.policy.vmm.VmmSpaceShared.deallocate", "modulename": "cloudy.policy.vmm", "qualname": "VmmSpaceShared.deallocate", "kind": "function", "doc": "<p>The deallocate function takes a list of VMs and removes them from the host.\nIt returns a list of booleans indicating whether each VM was successfully removed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong>:  Represent the instance of the class</li>\n<li><strong>vms: list[Vm, ...]</strong>:  Pass in a list of vms that we want to deallocate</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of booleans</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vms</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Vm</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "cloudy.policy.vmm.VmmSpaceShared.process", "modulename": "cloudy.policy.vmm", "qualname": "VmmSpaceShared.process", "kind": "function", "doc": "<p>The process function is the main function of the scheduler. It takes a duration\nparameter and processes all VMs for that amount of time. The return value is a list\nof finished VMs, which are removed from the scheduler.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>self</strong>:  Refer to the object itself</li>\n<li><strong>duration: int</strong>:  Determine how long the cpu should be processing for</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of vms that have finished their execution</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">duration</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Vm</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();